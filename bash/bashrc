# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Choose term
if [[ "${TERM}" == xterm-termite ]]; then
  export TERMINFO="/usr/local/share/terminfo/"
fi

# Kitty terminal emulator
alias kitty="kitty --config ${HOME}/.kitty.conf"
TERMINAL=/usr/bin/kitty

# Don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it
shopt -s histappend

# Add command to history
bind -m vi-insert  '"\C-q":  "\C-e\C-u history -s '\''\C-y'\''; echo -n '\''\C-y'\'' | xsel\C-m"'
bind -m vi-command '"\C-q": "I\C-e\C-u history -s '\''\C-y'\''; echo -n '\''\C-y'\'' | xsel\C-m"'

# Expand history in-line with space -- too annoying?
# bind Space:magic-space

# Keep lots of history, where it won't get wiped if this file isn't sourced
HISTSIZE=100000
HISTFILESIZE=200000
HISTFILE="${HOME}/.my_bash_history"

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# Make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Newline before subsequent PS1s
function __ps1_newline_login {
  if [[ -z "${PS1_NEWLINE_LOGIN}" ]]; then
    PS1_NEWLINE_LOGIN=true
  else
    printf '\n'
  fi
}
PROMPT_COMMAND='__ps1_newline_login'

if false; then
  # Powerline
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  . /usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh
else
  TON='$(tput bold)'
  TOFF='$(tput sgr0)'
  function TP () { echo "${TON}$(tput setaf $@)"; }
  RED="\033[38;2;200;120;120m" #c87878
  YEL="\033[38;2;223;175;143m" #dfaf8f
  GRN="\033[38;2;130;180;130m" #82b482
  CYN="\033[38;2;140;208;211m" #8cd0d3
  PUR="\033[38;2;192;190;209m" #c0bed1

  PROMPT_USER_COLOR="$(tput bold)${RED}"
  PROMPT_PREPOSITION_COLOR="$(tput bold)${YEL}"
  PROMPT_DEVICE_COLOR="$(tput bold)${GRN}"
  PROMPT_DIR_COLOR="$(tput bold)${CYN}"
  PROMPT_GIT_STATUS_COLOR="$(tput bold)${PUR}"
  PROMPT_GIT_PROGRESS_COLOR="$(tput bold)${YEL}"
  PROMPT_SYMBOL_COLOR="$(tput bold)${PUR}"
  export PS2="${TON}$(tput bold)${PUR}> ${TOFF}"
fi

# Run twolfson/sexy-bash-prompt
. ~/.bash_prompt

# Enable color support of ls and also add handy aliases
if [ -f ~/src/opensource/ivoarch/dircolors-zenburn/dircolors ]
then
  alias ls='ls --color=auto -N'
  alias grep='grep --color=auto'
  eval $(dircolors -b ~/src/opensource/ivoarch/dircolors-zenburn/dircolors)
elif [ -x /usr/bin/dircolors ]
then
  alias ls='ls --color=auto -N'
  alias grep='grep --color=auto'
  test -r ~/.dircolors && eval "$(dircolors -b ${HOME}/.dircolors)" || eval "$(dircolors -b)"
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Enable programmable completion features
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Made directory and cd into it
function mkcd () { mkdir -p "$@" && eval cd "\"\$$#\""; }

# Add unicode "formatting" to text
function strikethrough    () { echo "$@" | sed -e 's/./&Ì¶/g' | tee >(xsel); }
function underline        () { echo "$@" | sed -e 's/./&\xCC\xB2/g' | tee >(xsel); }
function double_underline () { echo "$@" | sed -e 's/./&\xCC\xB3/g' | tee >(xsel); }
function overline         () { echo "$@" | sed -e 's/./&\xCC\x85/g' | tee >(xsel); }
function slashthrough     () { echo "$@" | sed -e 's/./&\xCC\xB8/g' | tee >(xsel); }

# Open correct Ruby repl
alias ir="irb1.9.1"

# Python convert xlsx to csv
alias x2c="${HOME}/src/opensource/pythontools/xlsx2csv/xlsx2csv.py"

# Python check delimeters in table
alias ctd="${HOME}/src/opensource/pythontools/check_delim.py"

# Youtube-dl fix filenames for whitespace etc.
alias youtube-dl="youtube-dl --restrict-filenames"

# Choose vim
# TODO: When in neovim terminal, open files in neovim buffer
if [[ -x ~/pbin/nvim.appimage ]]; then
  my_vim='~/pbin/nvim.appimage'
elif command -v nvim &>/dev/null; then
  my_vim='nvim'
else
  my_vim='vim'
fi
export GIT_EDITOR="${my_vim}"
export VISUAL="${my_vim}"
export EDITOR="${my_vim}"
alias vi="${my_vim}"
alias nvim="${my_vim}"
alias nvi="${my_vim} -c 'call NotesGoyo()'"
# For opening files through i3 (whenever non-interactive?)
[[ $(which nvim) == ${HOME}/bin/nvim ]] && export VIMRUNTIME=~/src/opensource/neovim/neovim/runtime

# Avoid typing . for bin scripts that change directory
alias cdg=". ${HOME}/bin/cdg"

# TODO: comment
stty -ixon

# List extensions in directory, recursively
alias filetypes='find -type f -name '"'"'*.*'"'"' | sed '"'"'s/.*\.//'"'"' | sort -u'

# Rerun command on keypress
function loop () { while true; do clear; $@; read; done; }

# Get IP info
alias myip='curl ipinfo.io; echo'

# Get ping statistics
function pings () {
  for arg in $1 $2; do
    if [[ $arg =~ ^[0-9]+$ ]]; then
      local count=$arg
    elif [[ $arg =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      local ip=$arg
    fi
  done
  if [[ -z $count ]]; then
    local count=10
  fi
  if [[ -z $ip ]]; then
    local ip=8.8.8.8
  fi
  echo -e "Pinging $ip $count times.\n"
  local output=$(ping -c $count $ip | tee /dev/tty | grep '^64 bytes')
  <<< "$output" awk -F'[= ]' '\
    NR==1 {min=$10; max=$10; sum+=$10; next} \
    {if ($10<min) min=$10; if ($10>max) max=$10; sum+=$10} \
    END {print "\nmin: "min"\nmax: "max"\navg: "sum/NR}'
}

# Open tmux for running `git ds` and composing a commit message
alias gic='tmux new-session \;\
  send-keys "git ds" Enter \;\
  split-window -v \;\
  resize-pane -y 10 \;\
  send-keys Escape "v:nnoremap CQ :cq<CR>" Enter "igit commit -m \""'

# Git clone into github user's directory
function gclone () {
  if [[ $@ =~ ^https://github.com/([^/ ]*)/([^/ .]*).git$ ]]; then
    mkdir -p ${BASH_REMATCH[1]}
    cd ${BASH_REMATCH[1]}
    git clone $1
    cd ${BASH_REMATCH[2]}
  else
    echo Requires exactly one parameter: a github .git URL.
    return 1
  fi
}

# Avoid killing shell by accident (for tmux in particular)
function live () {
  export IGNOREEOF=3
  if [[ ! -z $TMUX ]]; then
    session=$(tmux display-message -p '#{session_name}')
    tmux set-environment -g -t${session} "IGNOREEOF" 3
  fi
}

# Python stuff
export PYTHONSTARTUP=~/.pythonrc.py
alias python=python3
alias pip=pip3
alias ipy='ipython3 --TerminalInteractiveShell.editing_mode=vi'
# TODO: expand?
function fluentpy () {
  python3 -m fluentpy "lib.sys.stdin.readlines()""$@"'.map(_.each.strip("\n")._).map(print)'
}
alias jn='jupyter-notebook --browser="google-chrome-stable --new-window %s"'

# R stuff
alias r=radian

function password () {
  (
    local words=${1:-4};
    local minLetters=${2:-3};
    local maxLetters=${3:-10};
    grep "^[a-z]\{$minLetters,$maxLetters\}$" /usr/share/dict/words | shuf -n $words | sed -e 's/^./\U&/g' | tr -d '\n';
    echo -n '!1'
  ) | tee /dev/tty | xsel;
  echo;
}
function passwords () { while true; do clear; password $@; read; done; }

# Use keychain
alias kch='eval $(/usr/bin/keychain --eval --agents ssh -Q --quiet '${HOME}'/.ssh/id_rsa)'
# TODO: fix or remove

# ssh stuff
function ssht () {
  TERM=screen-256color ssh "${1}" -t tmux new -A -s "${2:-default} "${@:3}""
}
alias ssh="ssht"

# Ethernet
alias ethernet='killInternet; \
        sudo ifconfig eth0 up; \
        sudo dhclient eth0'
alias killInternet='sudo kill `ps aux | grep "eth0" | grep -v "grep" | ssc 2` 2>/dev/null; \
        sudo kill `ps aux | grep "wlan0" | grep -v "grep" | ssc 2` 2>/dev/null; \
        sudo kill `ps aux | grep "dhclient" | grep -v "grep" | ssc 2` 2>/dev/null'

# Vi mode + emacs in insert
set -o vi
bind '"[5~": beginning-of-history'
bind '"[6~": end-of-history'
bind -m vi-command "g":beginning-of-history
bind -m vi-command "G":end-of-history
bind -m vi-command "o":insert-last-argument
bind -m vi-insert "\C-l":clear-screen
bind -m vi-insert "\C-a":beginning-of-line
bind -m vi-command "\C-a":beginning-of-line
bind -m vi-insert "\C-e":end-of-line
bind -m vi-command "\C-e":end-of-line
stty werase undef # Required for remapping C-w
bind -m vi-insert "\C-w":unix-filename-rubout
bind -m vi-insert "\C-n":next-history
bind -m vi-insert "\C-p":previous-history
bind -m vi-insert "\C-f":forward-char
bind -m vi-insert "\C-b":backward-char
bind -m vi-command "\C-d":vi-delete
bind -m vi-insert "\C-d":vi-delete
bind -m vi-insert "\C-k":yank-pop
# Dislike self-insert
bind -m vi-insert "\C-o":
# Why don't these work?
# bind -m vi-command "\ek":yank-pop
# bind -m vi-command "\ek":vi-yank-pop
# TODO: M-t swap?

# Get rid of Gnome desktop bullshit
alias killGnome='gsettings set org.gnome.desktop.background show-desktop-icons false'

export PATH="$PATH:$HOME/neovim/bin:$HOME/share/bin:$HOME/.gem/ruby/2.3.0/bin:$HOME/go/bin:$HOME/scala/scala-2.12.6/bin:/usr/local/cuda-9.0/bin:/usr/local/cuda-11.0/bin:$HOME/pbin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/src/ubermedia-inc/dpod-treasure-chest/emr_tools"

export PKG_CONFIG_PATH=$HOME/share/lib/pkgconfig
export PREFIX=$HOME/share
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
export LD_LIBRARY_PATH="/usr/local/cuda-9.0/lib64"

# Math stuff
alias ocg='octave --no-gui --silent'
alias oc='octave --no-gui --silent --eval "format long g" --persist'
alias math='rlwrap math -rawterm'

# Brief translations
alias trab='trans -b -no-autocorrect'
# TODO: fix round-trip translation, for testing translation accuracy
# function tround () {
  # trans -b -no-autocorrect "$1": "$(trans -b -no-autocorrect :"'"'"$1"'"'" "'"'"$*:2"'"'")"
  # trans -b -no-autocorrect $1: '"'"$(trans -b -no-autocorrect :$1 ${@:2})"'"'
  # destination=$(trans -b -no-autocorrect :"'"'"$1"'"'" "'"'"$*:2"'"'")
  # echo '"'"$1": "$(trans -b -no-autocorrect :"$1" "$*:2")"'"'
# }

# Scala stuff
# Console readline survives Ctrl-Z
alias sbt-console='rlwrap sbt console -Xnojline'
alias sbt-consoleQuick='rlwrap sbt consoleQuick -Xnojline'
alias sbt-testConsole='rlwrap sbt test:console -Xnojline'
alias sbt-testConsoleQuick='rlwrap sbt test:consoleQuick -Xnojline'
# export SBT_OPTS="-XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=2G -Xmx2048M -Xms2048M"
# Jline2 is broken, but rlwrap prevents access to tab-complete...
# alias scala='rlwrap -a scala'

# Mongodb stuff
alias mongo='rlwrap --always-readline mongo'

# AWS stuff
alias s3='aws s3'
alias s3s='aws s3 ls --summarize --recursive --human-readable'
export AWS_PROFILE=james
export AWS_CLI_AUTO_PROMPT=on-partial

# Quicker unmount with fusermount
alias fumt='fusermount -u'

# Ubermedia AWS EMR utils
alias ue='um-emr'

# Easy nohup
function quiet () { (nohup "$@" > /dev/null &); }
function quieter () { (nohup "$@" > /dev/null &); exit; }

# Quick opens
alias qa='quiet acroread'
alias Qa='quieter acroread'
alias qe='quiet evince'
alias Qe='quieter evince'
alias qv='quiet vlc'
alias Qv='quieter vlc'
alias qm='quiet rifle'
alias Qm='quieter rifle'
alias qf='quiet feh'
alias Qf='quieter feh'

# Generate output tersely and check &&/||
# alias A='echo A'
# function assert () {
  # if [ "$1" = -v ]; then
    # ("$@:2") && echo YEAH TOTALLY || echo FAT CHANCE
  # else
    # ("$@" &>/dev/null) && echo YEAH TOTALLY || echo FAT CHANCE
  # fi
# }

# Look for merge conflicts
alias viconflicts='vi $(rg -l "^[<=>]{7}[^<=>]*$")'

# Remove empty files without messing with sbt files
alias rmempty='rm $(find -type f -empty | grep -v "\\$")'

export PERL_MB_OPT="--install_base \"${HOME}/perl5\""
export PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5"
export PERL5LIB=~/perl5/lib/perl5/local/
# export PERL5LIB=~/.cpan/build/JSON-2.90-SdtLVG/lib/
# export PERL5LIB=~/.cpan/build/Math-Round-0.07-vJd8__/blib/lib/

# Fzf stuff
[ -f ~/.fzf.bash ] && {
  source ~/.fzf.bash
  # TODO: needed?
  # export FZF_DEFAULT_OPTS="--bind ctrl-g:toggle-all"
}

# Json stuff
alias norg="gron --ungron"
alias jqcsv='jq -r '"'"'(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv'"'"''

# Open output file names in vim
bind -m vi-command '"\C-v": "Ivi $(\eA)\e"'

# Relative path to full path to clipboard
bind -m vi-command '"\C-o": "Ireadlink -f \eA | xsel\e"'

# z jump around
[ -f ~/src/opensource/rupa/z/z.sh ] && source ~/src/opensource/rupa/z/z.sh

# bd back to directory
alias bd=". bd -si"

# open new terminal with kitty in same directory
function ncd () { (nohup kitty --config ~/.kitty.conf -d $PWD &>/dev/null &); }

# clock functions
function seconds_comparison () {
    end=$1
    start=$2
    time=$(( end - start ))
    seconds=$(printf %02d $(( time % 60 )))
    minutes=$(printf %02d $(( (time / 60) % 60 )))
    hours=$(printf %02d $(( time / 3600 )))
    echo -n $hours:$minutes:$seconds
}
function timer () {
  input=
  lap=1
  initial=$(date -u +%s)
  lap_start=$initial
  while [[ -z $input ]]; do read input
    now=$(date -u +%s)
    echo lap $(printf %02d $lap): $(seconds_comparison now lap_start)    total: $(seconds_comparison now initial)
    lap_start=$now
    lap=$(( lap + 1 ))
  done
}

# tree with common ignores
alias trees="tree -I 'target|lib_managed'"
alias treet="tree -I 'target|lib_managed|tmp'"
alias treeu="tree -I 'target|lib_managed|tmp|test'"

# Concise xevent output
alias xevc='xev | awk -F'\''[ )]+'\'' '\''/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'\'''

# Clever unique without sort
alias uniq_nosort='awk '\''!x[$0]++'\'''

# Ripgrep only small lines
alias rgm='rg -M 10000'
# Ripgrep within filenames
alias rgf='rg --files | rg'
# Ripgrep ignoring .gitignore
alias rgn='rg --no-ignore'

# OpenMW portmod
alias pmo="portmod openmw"

# Page with config
# export PAGER="pager -q 90000 -c '~/dotfiles/page/pagerc'"
export PAGER="pager -q 90000"
export MANPAGER="pager -C -e 'au User PageDisconnect sleep 100m|%y p|enew! |bd! #|pu p|set ft=man'"

# Conda stuff; activate manually
alias co="conda activate"
__conda_setup="$("${HOME}/anaconda3/bin/conda" 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
  eval "$__conda_setup"
else
  if [ -f "${HOME}/anaconda3/etc/profile.d/conda.sh" ]; then
    . "${HOME}/anaconda3/etc/profile.d/conda.sh"
  else
    export PATH="${HOME}/anaconda3/bin:$PATH"
  fi
fi
unset __conda_setup

# TODO: speed up by extracting as much as possible, in particular anything evaluated when sourced
