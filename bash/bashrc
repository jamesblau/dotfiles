# If not running interactively, don't do anything
[ -z "$PS1" ] && return

#Choose term
if [[ "${TERM}" == xterm-termite ]]; then
  export TERMINFO="/usr/local/share/terminfo/"
  #old_TERM=$TERM; TERM=dumb; TERM=$old_TERM; unset old_TERM
  . /etc/profile.d/vte.sh
  __vte_prompt_command
fi

#Choose color depth
if [ -n "$DISPLAY" -a "$TERM" == "xterm" ]; then
  export TERM=xterm-256color
  . ~/dotfiles/gnome-zenburn
fi

if [ "$TERM" = "linux" ]; then
  /bin/echo -e "
  \e]P0020202
  \e]P1bc4c4c
  \e]P26c9c6c
  \e]P3d8d856
  \e]P44b4cbd
  \e]P5bc6ca4
  \e]P64cb7bd
  \e]P7e5e5e5
  \e]P8414141
  \e]P9dc6c6c
  \e]PA8cbc8c
  \e]PBfffd00
  \e]PC6b6cdb
  \e]PDbe89ae
  \e]PE91d8db
  \e]PFffffff
  "
  # get rid of artifacts
  clear
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# Add command to history
bind -m vi-insert  '"\C-q":  "\C-e\C-u history -s '\''\C-y'\''; echo -n '\''\C-y'\'' | xclip\C-m"'
bind -m vi-command '"\C-q": "I\C-e\C-u history -s '\''\C-y'\''; echo -n '\''\C-y'\'' | xclip\C-m"'

# Expand history in-line with space
bind Space:magic-space

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=200000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Newline before subsequent PS1s
function __ps1_newline_login {
  if [[ -z "${PS1_NEWLINE_LOGIN}" ]]; then
    PS1_NEWLINE_LOGIN=true
  else
    printf '\n'
  fi
}
PROMPT_COMMAND='__ps1_newline_login'

if false; then
  # Powerline
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  . /usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh
else
  TON='$(tput bold)'
  TOFF='$(tput sgr0)'
  function TP () { echo "${TON}$(tput setaf $@)"; }
  RED="\033[38;5;1m"
  YEL="\033[33m"
  GRN="\033[38;5;15m\033[38;5;2m"
  CYN="\033[1;36m"

  PROMPT_USER_COLOR="$(tput bold)${RED}"
  PROMPT_PREPOSITION_COLOR="$(tput bold)${YEL}"
  PROMPT_DEVICE_COLOR="$(tput bold)${GRN}"
  PROMPT_DIR_COLOR="$(tput bold)${CYN}"
  PROMPT_GIT_STATUS_COLOR=`TP 5`
  PROMPT_GIT_PROGRESS_COLOR="$(tput bold)${YEL}"
  PROMPT_SYMBOL_COLOR=`TP 5`
  export PS2="${TON}$(TP 5)> ${TOFF}"
fi

# Run twolfson/sexy-bash-prompt
. ~/.bash_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color'
    alias grep='grep --color'
fi
[ -f ~/src/opensource/ivoarch/dircolors-zenburn/dircolors ] && eval $( dircolors -b ~/src/opensource/ivoarch/dircolors-zenburn/dircolors )

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# reset and kill n
alias intnon='sudo modprobe -r iwlwifi; sudo modprobe iwlwifi 11n_disable=1'

function mkdircd () { mkdir -p "$@" && eval cd "\"\$$#\""; }

#Open correct Ruby repl, irb1.9.1
alias ir="irb1.9.1"

#Python convert xlsx to csv
alias x2c="/home/james/src/opensource/pythontools/xlsx2csv/xlsx2csv.py"

#Python check delimeters in table
alias ctd="/home/james/src/opensource/pythontools/check_delim.py"

#Choose vim
if [ -x /usr/local/bin/nvim ]; then
  if [ "$james_in_neovim" == 1 ]; then
    my_vim='nvim-terminal-edit.py'
  else
    my_vim='nvim'
  fi
else
  my_vim='vim'
fi
export GIT_EDITOR="${my_vim}"
export VISUAL="${my_vim}"
export EDITOR="${my_vim}"
alias vi="${my_vim}"
#I forget why this is here
[[ -d /usr/share/vim/vim74 && "${my_vim}" != 'nvim' ]] && export VIMRUNTIME=/usr/share/vim/vim74

#Avoid typing . for bin scripts that change directory
alias cdg=". /home/james/bin/cdg"

stty -ixon

alias filetypes='find -type f -name '"'"'*.*'"'"' | sed '"'"'s|.*\.||'"'"' | sort -u'

function loop () { while true; do clear; $@; read; done; }

alias myip='wget -qO- http://ipecho.net/plain | tee /dev/tty | xclip; echo'

export PYTHONSTARTUP=~/.pythonrc.py

function password () {
  (
    local words=${1:-4};
    local minLetters=${2:-3};
    local maxLetters=${3:-10};
    grep "^[a-z]\{$minLetters,$maxLetters\}$" /usr/share/dict/words | shuf -n $words | sed -e 's/^./\U&/g' | tr -d '\n';
    echo -n '!1'
  ) | tee /dev/tty | xclip;
  echo;
}
function passwords () { while true; do clear; password $@; read; done; }

#Use keychain
alias kch='eval $(/usr/bin/keychain --eval --agents ssh -Q --quiet ~/.ssh/id_rsa)'

#Ethernet
alias ethernet='killInternet; \
        sudo ifconfig eth0 up; \
        sudo dhclient eth0'
alias killInternet='sudo kill `ps aux | grep "eth0" | grep -v "grep" | ssc 2` 2>/dev/null; \
        sudo kill `ps aux | grep "wlan0" | grep -v "grep" | ssc 2` 2>/dev/null; \
        sudo kill `ps aux | grep "dhclient" | grep -v "grep" | ssc 2` 2>/dev/null'

# Vi mode + emacs in insert
set -o vi
bind '"[5~": beginning-of-history'
bind '"[6~": end-of-history'
bind -m vi-move "g":beginning-of-history
bind -m vi-move "G":end-of-history
bind -m vi-command "o":insert-last-argument
bind -m vi-insert "\C-l.":clear-screen
bind -m vi-insert "\C-a.":beginning-of-line
bind -m vi-move "\C-a.":beginning-of-line
bind -m vi-insert "\C-e.":end-of-line
bind -m vi-move "\C-e.":end-of-line
stty werase undef # Required for remapping C-w
bind -m vi-insert "\C-w.":unix-filename-rubout
bind -m vi-insert "\C-n.":next-history
bind -m vi-insert "\C-p.":previous-history
bind -m vi-insert "\C-f.":forward-char
bind -m vi-insert "\C-b.":backward-char
bind -m vi-move "\C-d.":vi-delete
bind -m vi-insert "\C-d.":vi-delete
bind -m vi-insert "\C-k.":
bind -m vi-insert "\C-o.":
#bind -m vi-insert "kj":vi-movement-mode forward-char

#This stuff available in vim, etc
#BASH_ENV="~/.bash_ni"

#Get rid of Gnome desktop bullshit
alias killGnome='gsettings set org.gnome.desktop.background show-desktop-icons false'

export PATH="$PATH:$HOME/bin:$HOME/tresata"

#Console readline survives Ctrl-Z
alias sbt-console='rlwrap sbt console -Xnojline'
alias sbt-consoleQuick='rlwrap sbt consoleQuick -Xnojline'
alias sbt-testConsole='rlwrap sbt test:console -Xnojline'
alias sbt-testConsoleQuick='rlwrap sbt test:consoleQuick -Xnojline'

#Color ag
alias cag='ag --color'

#Easy nohup
function quiet () { (nohup "$@" > /dev/null &); }
function quieter () { (nohup "$@" > /dev/null &); exit; }

#Generate output tersely and check &&/||
alias A='echo A'
function assert () {
  if [ "$1" = -v ]; then
    ("$@:2") && echo YEAH TOTALLY || echo FAT CHANCE
  else
    ("$@" &>/dev/null) && echo YEAH TOTALLY || echo FAT CHANCE
  fi
}

export PERL_MB_OPT="--install_base \"~/perl5\""
export PERL_MM_OPT="INSTALL_BASE=~/perl5"
export PERL5LIB=~/perl5/lib/perl5/local/
#export PERL5LIB=~/.cpan/build/JSON-2.90-SdtLVG/lib/
#export PERL5LIB=~/.cpan/build/Math-Round-0.07-vJd8__/blib/lib/

# Fzf stuff
[ -f ~/.fzf.bash ] && {
  source ~/.fzf.bash
  # Pipe output file names to fzf
  bind -m vi-command '"\C-f": "A | fzf\e"'
  export FZF_DEFAULT_OPTS="--bind ctrl-g:toggle-all"
}

# Open output file names in vim
bind -m vi-command '"\C-v": "Ivi $(\eA)\e"'

# z jump around
[ -f ~/src/opensource/rupa/z/z.sh ] && source ~/src/opensource/rupa/z/z.sh

# bd back to directory
alias bd=". ~/src/opensource/vigneshwaranr/bd/bd -si"
