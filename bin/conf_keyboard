#!/bin/bash -ex

setxkbmap -option ctrl:nocaps

#Set AltRight+F12 to CapsLock
xmodmap -e "keycode  96 = F12 F12 Caps_Lock F12 F12 F12 XF86Switch_VT_12 F12 F12 XF86Switch_VT_12"

xmodmap -e "keysym Alt_R = Mode_switch"
xmodmap -e "keycode 30 = u U Home Home Home Home"
xmodmap -e "keycode 31 = i I Prior Prior Prior Prior"
xmodmap -e "keycode 32 = o O Next Next Next Next"
xmodmap -e "keycode 33 = p P End End End End"
xmodmap -e "keycode 43 = h H Left Left Left Left"
xmodmap -e "keycode 44 = j J Down Down Down Down"
xmodmap -e "keycode 45 = k K Up Up Up Up"
xmodmap -e "keycode 46 = l L Right Right Right Right"
# TODO Why does Alt-R need to be pressed before shift, but not before control?

xmodmap -e "keycode 107 = Super_L Super_R"

killall -q xcape || :
xcape

# TODO? more xcape {{{
  # Map an unused modifier's keysym to the spacebar's keycode and make it a
  # control modifier. It needs to be an existing key so that emacs won't
  # spazz out when you press it. Hyper_L is a good candidate.
  #spare_modifier1="Hyper_L"
  #spare_modifier1="Hyper_R"
  #xmodmap -e "keycode 23 = $spare_modifier1"
  #xmodmap -e "keycode 51 = $spare_modifier2"
  #xmodmap -e "remove mod4 = $spare_modifier1" # hyper_l is mod4 by default
  #xmodmap -e "remove mod4 = $spare_modifier2" # hyper_r is mod4 by default
  #xmodmap -e "add Super_L = $spare_modifier1"
  #xmodmap -e "add Super_L = $spare_modifier2"

  # Map space to an unused keycode (to keep it around for xcape to
  # use).
  #xmodmap -e "keycode any = Tab ISO_Left_Tab Tab ISO_Left_Tab"
  #xmodmap -e "keycode any = backslash bar backslash bar backslash bar backslash bar"

  # Finally use xcape to cause the space bar to generate a space when tapped.
  #~/src/opensource/alols/xcape/xcape -e "$spare_modifier1=Tab"
  #~/src/opensource/alols/xcape/xcape -e "$spare_modifier2=backslash"
#}}}

# TODO? Map: hold enter -> control, control + hold enter -> hold enter if possible
#            hold tab, backslash (no modifiers) -> Super
#            hold backtick -> "arrow mode"
