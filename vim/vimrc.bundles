" vim: sw=2 ts=2 sts=2 expandtab ft=vim

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

"let g:EclimCompletionMethod = 'omnifunc'

" To evaluate later {{{
 " Plug 'tpope/vim-scriptease'
 " Plug 'tpope/vim-sleuth'
 " Plug 'tpope/vim-speeddating'
 " Plug 'tpope/vim-rsi'
 " Plug 'tpope/vim-characterize'
 " Plug 'tpope/vim-afterimage'
 " Plug 'tpope/vim-flatfoot'
 " Plug 'tommcdo/vim-lion'
 " Plug 'wellle/targets.vim'
 " Plug 'spiiph/vim-space'
 " Plug 'zefei/vim-colortuner'
 " Plug 'jbnicolai/vim-AnsiEsc'
 " Plug 'rkitover/vimpager'
" }}}

" Run always {{{
  " Plug 'jnurmine/Zenburn' {{{
    function! James_Zenburn()
      let g:zenburn_old_Visual=1
      let g:zenburn_alternate_Visual=1
      let g:zenburn_high_Contrast=1
      colorscheme zenburn
      "hi NonText       guifg=#cc9393 gui=bold                ctermfg=174
      hi CursorLine cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
      hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
    endfunction
    nnoremap <Leader><C-C>z :call James_Zenburn()<CR>
    Plug 'jnurmine/Zenburn'
  " }}}
  " Plug 'junegunn/seoul256.vim' {{{
    let g:seoul256_background = 233
    Plug 'junegunn/seoul256.vim'
  " }}}
  " Plug 'vim-scripts/Transparent' {{{
    function! James_Transparent()
      colorscheme transparent
      hi CursorLine         ctermfg=White         ctermbg=DarkRed     cterm=Bold
      hi SignColumn         ctermfg=Yellow        ctermbg=None
      hi LineNr             ctermfg=Yellow        ctermbg=None
      hi CursorLineNr       ctermfg=Yellow        ctermbg=None
      hi Normal             ctermfg=White
      hi Search             ctermfg=White         ctermbg=DarkRed
      hi Visual             ctermfg=DarkRed       ctermbg=White
      hi vimLineComment     ctermfg=LightBlue
      hi NonText            ctermfg=DarkRed
      hi DiffAdd            ctermfg=Yellow        ctermbg=None
      hi DiffChange         ctermfg=Yellow        ctermbg=None
      hi DiffDelete         ctermfg=Yellow        ctermbg=None
      hi DiffText           ctermfg=None          ctermbg=DarkGray
      hi GitGutterAdd                             ctermbg=None
      hi GitGutterChange                          ctermbg=None
      hi GitGutterChangeDeleteDefault             ctermbg=None
      hi GitGutterChangeLineDefault               ctermbg=None
      hi GitGutterDeleteLine                      ctermbg=None
      hi GitGutterAddDefault                      ctermbg=None
      hi GitGutterChangeDefault                   ctermbg=None
      hi GitGutterChangeDeleteLine                ctermbg=None
      hi GitGutterDelete                          ctermbg=None
      hi GitGutterAddLine                         ctermbg=None
      hi GitGutterChangeDelete                    ctermbg=None
      hi GitGutterChangeLine                      ctermbg=None
      hi GitGutterDeleteDefault                   ctermbg=None
      hi shDoubleQuote                            ctermbg=None
      hi MatchParen          cterm=undercurl,bold
    endfunction
    nnoremap <Leader><C-C>t :call James_Transparent()<CR>
    Plug 'vim-scripts/Transparent'
  " }}}
" }}}

if !exists('g:james_minimal_plugins')

  " Aesthetic {{{
    " Plug 'bling/vim-airline' {{{
      if !exists('g:james_no_hud')
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#left_sep = ' '
        let g:airline#extensions#tabline#left_alt_sep = '|'
        let g:airline#extensions#tabline#buffer_nr_show = 1
        if v:version >= 704 " If I don't have up-to-date Vim, I probably don't have powerline fonts, and vice versa
          let g:airline_powerline_fonts = 1
        endif
        let g:airline_theme = 'zenburn'
        if !exists('g:airline_powerline_fonts')
          " Use the default set of separators with a few customizations
          let g:airline_left_sep='›'  " Slightly fancier than '>'
          let g:airline_right_sep='‹' " Slightly fancier than '<'
        endif
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        set statusline+=%{fugitive#statusline()} " Git Hotness
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
      endif
      Plug 'bling/vim-airline'
    " }}}
    Plug 'vim-scripts/CycleColor', { 'on': ['CycleColorNext', 'CycleColorPrev', 'CycleColorRefresh'] }
    " Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' } {{{
      let g:indent_guides_enable_on_vim_startup = 0
      let g:indent_guides_default_mapping = 0
      let g:indent_guides_start_level = 2
      let g:indent_guides_guide_size = 1
      nnoremap <Leader>si :IndentGuidesToggle<CR>
      Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' }
    " }}}
    " Plug 'luochen1990/rainbow' {{{
      let g:rainbow_active = 1
      Plug 'luochen1990/rainbow'
    " }}}
    " Plug 'junegunn/goyo.vim', { 'on': 'Goyo' } {{{
      "let g:goyo_width=100
      "let g:goyo_height=100
      "let g:goyo_linenr=0
      nnoremap <Leader><C-G> :Goyo<CR>
      Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
    " }}}
    " Plug 'junegunn/limelight.vim', { 'on': 'Limelight' } {{{
      function! LimelightToggle()
        if !exists('g:james_limelight')
          let g:james_limelight=1
          Limelight
        else
          if g:james_limelight == 1
            let g:james_limelight=0
            Limelight!
          else
            let g:james_limelight=1
            Limelight
          endif
        endif
      endfunction
      nnoremap <Leader><C-L> :call LimelightToggle()<CR>
      " Color name (:help cterm-colors) or ANSI code
      let g:limelight_conceal_ctermfg = 'gray'
      let g:limelight_conceal_ctermfg = 240

      " Color name (:help gui-colors) or RGB color
      let g:limelight_conceal_guifg = 'DarkGray'
      let g:limelight_conceal_guifg = '#777777'

      " Default: 0.5
      let g:limelight_default_coefficient = 0.7

      " Number of preceding/following paragraphs to include (default: 0)
      let g:limelight_paragraph_span = 1

      " Beginning/end of paragraph
      "   When there's no empty line between the paragraphs
      "   and each paragraph starts with indentation
      let g:limelight_bop = '^\s'
      let g:limelight_eop = '\ze\n^\s'

      " Highlighting priority (default: 10)
      "   Set it to -1 not to overrule hlsearch
      let g:limelight_priority = -1
      Plug 'junegunn/limelight.vim', { 'on': 'Limelight' }
    " }}}
    Plug 'vasconcelloslf/vim-interestingwords'
  " }}}

  " Buffers / windows / tabs / sessions {{{
    " Plug 'troydm/zoomwintab.vim', { 'on': 'ZoomWinTabToggle' } {{{
      let g:zoomwintab_remap=0
      nnoremap <silent> <C-W><C-W> :ZoomWinTabToggle<CR>
      Plug 'troydm/zoomwintab.vim', { 'on': 'ZoomWinTabToggle' }
    " }}}
    Plug 'vim-scripts/Tabmerge', { 'on': 'Tabmerge' }
    "Plug 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'
    " Plug 'xolox/vim-misc' | Plug 'xolox/vim-session' {{{
      let g:session_autoload = 'no'
      let g:session_autosave = 'no'
      nnoremap <Leader>S <Nop>
      nnoremap <Leader>SL :SessionList<CR>
      nnoremap <Leader>SO :OpenSession<Space>
      nnoremap <Leader>SV :ViewSession<CR>
      nnoremap <Leader>SS :SaveSession<Space>
      nnoremap <Leader>SC :CloseSession<CR>
      nnoremap <Leader>STO :OpenTabSession<CR>
      nnoremap <Leader>STS :SaveTabSession<CR>
      nnoremap <Leader>STA :AppendTabSession<CR>
      nnoremap <Leader>STC :CloseTabSession<CR>
      Plug 'xolox/vim-misc' | Plug 'xolox/vim-session'
    " }}}
  " }}}

  " Completion / fuzzy find {{{
    Plug 'goldfeld/ctrlr.vim'
    " Plug 'gorkunov/smartgf.vim' if 704 and has ag{{{
      if v:version >= 704 && executable('ag')
        Plug 'gorkunov/smartgf.vim'
      endif
    " }}}
    " Plug 'junegunn/fzf', { 'dir': '~/src/opensource/junegunn/fzf', 'do': 'yes \| ./install' } {{{
      command! FZFMru call fzf#run({
      \  'source':  v:oldfiles,
      \  'sink':    'e',
      \  'options': '-m -x +s' })
      Plug 'junegunn/fzf', { 'dir': '~/src/opensource/junegunn/fzf', 'do': 'yes \| ./install' }
      nnoremap <Leader>eo :FZFMru<CR>
    " }}}
    " Plug 'kien/ctrlp.vim' {{{
      let g:ctrlp_working_path_mode = 'ra'
      "let g:ctrlp_use_caching = 10000
      "let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard'] " Any advantage to integrating ag and git-ls-files?
      if executable('ag')
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
      endif
      nnoremap <silent> <C-P> :CtrlP<CR>
      nnoremap <silent> gb :CtrlPBuffer<CR>
      nnoremap <silent> gm :CtrlPMRU<CR>
      let g:ctrlp_buffer_func = { 'enter': 'BrightHighlightOn', }
      function! BrightHighlightOn()
        set cursorline
      endfunction
      let g:ctrlp_prompt_mappings = {
        \ 'PrtBS()':              ['<c-h>', '<bs>', '<c-]>'],
        \ 'PrtDelete()':          ['<c-d>', '<del>'],
        \ 'PrtSelectMove("t")':   ['', '<Home>', '<kHome>'],
        \ 'PrtSelectMove("b")':   ['<c-g>', '<End>', '<kEnd>'],
        \ 'ToggleByFname()':      ['<c-i>'],
        \ 'ToggleType(1)':        ['<c-l>', '<c-up>'],
        \ 'ToggleType(-1)':       ['<c-down>'],
        \ 'PrtCurLeft()':         ['<c-b>', '<left>', '<c-^>'],
        \ 'PrtCurRight()':        ['<c-f>', '<right>'],
        \ 'PrtExit()':            ['<esc>', '<c-c>'],
        \ }
      "let g:ctrlp_custom_ignore = {
        "\ 'dir':  '\.git$\|\.hg$\|\.svn$',
        "\ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
      Plug 'kien/ctrlp.vim'
    " }}}
    " Plug 'majutsushi/tagbar' if 704 {{{
      if v:version >= 704
        let g:tagbar_autoclose=1
        nnoremap <Leader><C-]> :TagbarToggle<CR>
        Plug 'majutsushi/tagbar'
      endif
    " }}}
    " Plug 'rking/ag.vim' {{{
      let g:ag_working_path_mode="r"
      Plug 'rking/ag.vim'
    " }}}
    Plug 'SirVer/ultisnips', { 'on': [] } " See YouCompleteMe below for loading mapping
    " Plug 'Valloric/YouCompleteMe', { 'on': [] } {{{
      nnoremap <Leader>s<Tab> :call plug#load('ultisnips', 'YouCompleteMe')<CR>:call youcompleteme#Enable()<CR>
      Plug 'Valloric/YouCompleteMe', { 'on': [] }
    " }}}
    " Plug 'vim-scripts/cmdline-completion' {{{
      cmap <C-J> <Plug>CmdlineCompletionBackward
      cmap <C-K> <Plug>CmdlineCompletionForward
      Plug 'vim-scripts/cmdline-completion'
    " }}}
  " }}}

  " Core {{{
    " Plug 'cohama/lexima.vim' if 704 {{{
      let g:lexima_no_default_rules=1
      if v:version >= 704
        Plug 'cohama/lexima.vim'
      endif
    " }}}
    " Plug 'justinmk/vim-sneak' {{{
      " Don't lose S to vim-surround
      let g:sneak#streak = 1
      xmap S <Plug>Sneak_S
      Plug 'justinmk/vim-sneak'
    " }}}
    " Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } {{{
      let g:undotree_SetFocusWhenToggle=1
      nnoremap <Leader>u :UndotreeToggle<CR>
      Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
    " }}}
    Plug 'scrooloose/nerdcommenter'
    " Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } {{{
      "let NERDTreeHijackNetrw = 1
      "let loaded_netrwPlugin = 1
      nnoremap ,T :NERDTreeToggle<CR>
      Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    " }}}
    Plug 'tmhedberg/matchit'
    " Plug 'tpope/vim-abolish' {{{
      vnoremap <Leader>s<Space> y:OverCommandLine<CR>%S/<C-T>"/
      vnoremap <Leader>ss y:%S/<C-R>"/<C-R>"/g<C-G>
      nnoremap <Leader>s<Space> :OverCommandLine<CR>%S/<C-T><C-W>/
      nnoremap <Leader>ss :%S/<C-R><C-W>/<C-R><C-W>/g<C-G>
      Plug 'tpope/vim-abolish'
    " }}}
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-sensible'
    Plug 'tpope/vim-unimpaired'
    " Plug 'Shougo/vimproc.vim', { 'do': 'make' } | Plug 'Shougo/vimshell.vim' if 704 {{{
      if v:version >= 704
        Plug 'Shougo/vimproc.vim', { 'do': 'make' } | Plug 'Shougo/vimshell.vim'
      endif
    " }}}
  " }}}

  " Fun {{{
    Plug 'mattn/invader-vim', { 'on': 'Invader' }
  " }}}

  " Integration {{{
    " Plug 'airblade/vim-gitgutter' {{{
      "let g:gitgutter_initialised = 1
      "let g:gitgutter_realtime = 0
      nnoremap <silent> <Leader>gs :Gstatus<CR>
      nnoremap <silent> <Leader>gd :Gdiff<CR>
      nnoremap <silent> <Leader>gm :Gdiff master<CR>
      nnoremap <silent> <Leader>gc :Gcommit<CR>
      nnoremap <silent> <Leader>gb :Gblame<CR>
      nnoremap <silent> <Leader>gl :Glog<CR>
      nnoremap <silent> <Leader>gp :Git push<CR>
      nnoremap <silent> <Leader>gr :Gread<CR>:GitGutter<CR>
      nnoremap <silent> <Leader>gw :Gwrite<CR>:GitGutter<CR>
      nnoremap <silent> <Leader>ge :Gedit<CR>
      nnoremap <silent> <Leader>gg :GitGutterToggle<CR>
      Plug 'airblade/vim-gitgutter'
    " }}}
    " Plug 'christoomey/vim-tmux-navigator' {{{
      let g:tmux_navigator_no_mappings = 1
      "nnoremap <silent> {Left-mapping} :TmuxNavigateLeft<CR>
      "nnoremap <silent> {Down-Mapping} :TmuxNavigateDown<CR>
      "nnoremap <silent> {Up-Mapping} :TmuxNavigateUp<CR>
      "nnoremap <silent> {Right-Mapping} :TmuxNavigateRight<CR>
      "nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<CR>
      Plug 'christoomey/vim-tmux-navigator'
    " }}}
    " Plug 'scrooloose/syntastic' if 704 {{{
      if v:version >= 704
        let g:syntastic_mode_map = {'mode': 'passive'}
        nnoremap <Leader>sy :SyntasticToggleMode<CR>
        nnoremap <Leader>ys :SyntasticCheck<CR>
        Plug 'scrooloose/syntastic'
      endif
    " }}}
    " Plug 'tpope/vim-fugitive' {{{
      nnoremap <silent> <Leader>gs :Gstatus<CR>
      nnoremap <silent> <Leader>gd :Gdiff<CR>
      nnoremap <silent> <Leader>gm :Gdiff master<CR>
      nnoremap <silent> <Leader>gc :Gcommit<CR>
      nnoremap <silent> <Leader>gb :Gblame<CR>
      nnoremap <silent> <Leader>gl :Glog<CR>
      nnoremap <silent> <Leader>gp :Git push<CR>
      nnoremap <silent> <Leader>ge :Gedit<CR>
      Plug 'tpope/vim-fugitive'
    " }}}
  " }}}

  " Language-specific {{{
    " Plug 'chrisbra/csv.vim', { 'for': 'csv' } {{{
      "au! BufNewFile,BufRead *.bsv set filetype=csv
      nnoremap <Leader>qw :WhatColumn<CR>
      nnoremap <Leader>qW :WhatColumn!<CR>
      nnoremap <Leader>qc :NrColumns<CR>
      nnoremap <Leader>qs :SearchInColumn<Space>
      nnoremap <Leader>qh :HiColumn<CR>
      nnoremap <Leader>qH :HiColumn!<CR>
      nmap <Leader>qd :let g:csv_delim=''<C-B>
      nnoremap <silent> <Leader>qS :CSVTabularize<CR><C-W>T:above new<CR>:res 3<CR>:setl scrollbind buftype=nofile<CR><C-W>j:setl scrollbind sbo=hor buftype=nofile<CR>ggVjjd<C-W>kVp<C-W>j
      Plug 'chrisbra/csv.vim', { 'for': 'csv' }
    " }}}
    Plug 'derekwyatt/vim-sbt', { 'for': 'sbt.scala' }
    " Plug 'derekwyatt/vim-scala', { 'for': 'scala' } {{{
      let g:scala_use_default_keymappings = 0
      let g:scala_sort_across_groups=1
      let g:scala_first_party_namespaces='\(com\.tresata\)'
      let g:scala_use_builtin_tagbar_defs=0
      nnoremap          <C-S><C-A><C-T> :Ag  <C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR><Home><Right><Right><Right>
      nnoremap          <C-S><C-A><C-M> :Ag  <C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR><Home><Right><Right><Right>
      nnoremap          <C-S><C-A><C-R> :Ag  <C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR><Home><Right><Right><Right>
      nnoremap          <C-S><C-T>         :<C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR>
      cnoremap          <C-S><C-T>          <C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR>
      nnoremap          <C-S><C-M>         :<C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR>
      cnoremap          <C-S><C-M>          <C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR>
      nnoremap          <C-S><C-R>         :<C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR>
      cnoremap          <C-S><C-R>          <C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR>
      nnoremap <silent> <C-S><C-P><C-T> :CtrlP <C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR><CR>
      nnoremap <silent> <C-S><C-P><C-M> :CtrlP <C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR><CR>
      nnoremap <silent> <C-S><C-P><C-R> :CtrlP <C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR><CR>
      au! BufEnter *.scala setl formatprg=java\ -jar\ ~/bin/scalariform.jar\ -f\ -q\ +compactControlReadability\ +alignParameters\ +alignSingleLineCaseStatements\ +doubleIndentClassDeclaration\ +preserveDanglingCloseParenthesis\ +rewriteArrowSymbols\ +preserveSpaceBeforeArguments\ --stdin\ --stdout
      Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
    " }}}
    Plug 'elzr/vim-json', { 'for': 'json' }
    " Plug('https://bitbucket.org/larsyencken/vim-drake-syntax.git'), { 'for': 'drake' } {{{
      au! BufNewFile,BufRead Drakefile* setl ft=drake
      Plug('https://bitbucket.org/larsyencken/vim-drake-syntax.git'), { 'for': 'drake' }
    " }}}
    Plug 't9md/vim-chef'
    Plug 'tpope/vim-ragtag'
  " }}}

  " Registers {{{
    Plug 'vim-scripts/RedirCommands'
    Plug 'vim-scripts/regRedir.vim'
    " Plug 'tyru/regbuf.vim' {{{
      nnoremap <Leader>sr :RegbufOpen<CR>
      Plug 'tyru/regbuf.vim'
      "autocmd regbuf BufWinLeave <buffer> bw regbuf:preview
    " }}}
  " }}}

  " Text objects {{{
    Plug 'b4winckler/vim-angry'
    " Plug 'bkad/CamelCaseMotion' {{{
      map -w <Plug>CamelCaseMotion_w
      map -b <Plug>CamelCaseMotion_b
      map -e <Plug>CamelCaseMotion_e
      omap i-w <Plug>CamelCaseMotion_iw
      xmap i-w <Plug>CamelCaseMotion_iw
      omap i-b <Plug>CamelCaseMotion_ib
      xmap i-b <Plug>CamelCaseMotion_ib
      omap i-e <Plug>CamelCaseMotion_ie
      xmap i-e <Plug>CamelCaseMotion_ie
      Plug 'bkad/CamelCaseMotion'
    " }}}
    Plug 'kana/vim-textobj-entire'
    Plug 'kana/vim-textobj-indent'
    Plug 'kana/vim-textobj-user'
    Plug 'vim-scripts/Parameter-Text-Objects'
    " Plug 'tpope/vim-surround' {{{
      " Sneak has S so use ,S
      let g:surround_no_mappings = 1
      xmap <Leader>S <Plug>VSurround
      " Largely defaults below
      nmap ds  <Plug>Dsurround
      nmap cs  <Plug>Csurround
      nmap cS  <Plug>CSurround
      nmap ys  <Plug>Ysurround
      nmap yS  <Plug>YSurround
      nmap yss <Plug>Yssurround
      nmap ySS <Plug>YSsurround
      xmap gS  <Plug>VgSurround
      imap <A-s> <Plug>Isurround
      imap <A-S> <Plug>ISurround
      Plug 'tpope/vim-surround'
    " }}}
  " }}}

  " Visual / selection / alignment {{{
    " Plug 'godlygeek/tabular' {{{
      nmap <Leader>a& :Tabularize /&<CR>
      vmap <Leader>a& :Tabularize /&<CR>
      nmap <Leader>a= :Tabularize /=<CR>
      vmap <Leader>a= :Tabularize /=<CR>
      nmap <Leader>a: :Tabularize /:<CR>
      vmap <Leader>a: :Tabularize /:<CR>
      nmap <Leader>a:: :Tabularize /:\zs<CR>
      vmap <Leader>a:: :Tabularize /:\zs<CR>
      nmap <Leader>a, :Tabularize /,<CR>
      vmap <Leader>a, :Tabularize /,<CR>
      nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
      vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
      Plug 'godlygeek/tabular'
    " }}}
    " Plug 'terryma/vim-multiple-cursors' {{{
      let g:multi_cursor_exit_from_insert_mode=0
      let g:multi_cursor_exit_from_visual_mode=0
      nnoremap <C-Q><C-N> :MultipleCursorsFind \<<C-R>=expand("<cword>")<CR>\><CR>
      Plug 'terryma/vim-multiple-cursors'
    " }}}
    Plug 'vim-scripts/visSum.vim'
    Plug 'vim-scripts/vsearch.vim'
  " }}}

endif

call plug#end()
" vim: set foldmethod=marker :
