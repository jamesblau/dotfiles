" vim: sw=2 ts=2 sts=2 expandtab ft=vim

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

" To evaluate later {{{
 " Plug 'tpope/vim-scriptease'
 " Plug 'tpope/vim-sleuth'
 " Plug 'tpope/vim-speeddating'
 " Plug 'tpope/vim-rsi'
 " Plug 'tpope/vim-characterize'
 " Plug 'tpope/vim-afterimage'
 " Plug 'tpope/vim-flatfoot'
 " Plug 'tpope/vim-commentary'
 " Plug 'tommcdo/vim-lion'
 " Plug 'wellle/targets.vim'
 " Plug 'spiiph/vim-space'
 " Plug 'zefei/vim-colortuner'
 " Plug 'rkitover/vimpager'
 " https://github.com/Shougo/dein.vim
 " Plug 'buntec/neovim-scalavista', { 'do': ':UpdateRemotePlugins' }
 " Plug 'ensime/ensime-vim', { 'do': ':UpdateRemotePlugins' }
 " Plug 'mg979/vim-visual-multi'
 " Plug 'tmhedberg/SimpylFold'
 " Plug 'Konfekt/FastFold'
 " let g:EclimCompletionMethod = 'omnifunc'
" }}}

" Run always {{{
  " Plug 'jnurmine/Zenburn' {{{
    function! James_Zenburn()
      let g:zenburn_old_Visual=1
      let g:zenburn_alternate_Visual=1
      let g:zenburn_high_Contrast=1
      colorscheme zenburn
      "hi NonText       guifg=#cc9393 gui=bold                ctermfg=174
      hi CursorLine cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
      hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
      hi IndentGuidesEven ctermbg=grey
      hi IndentGuidesOdd ctermbg=red
      hi Whitespace ctermfg=white
    endfunction
    Plug 'jnurmine/Zenburn'
  " }}}
  " Plug 'junegunn/seoul256.vim' {{{
    let g:seoul256_background = 233
    Plug 'junegunn/seoul256.vim'
  " }}}
  " Plug 'vim-scripts/Transparent' {{{
    function! James_Transparent()
      colorscheme transparent
      hi CursorLine         ctermfg=White         ctermbg=DarkRed     cterm=Bold
      hi SignColumn         ctermfg=Yellow        ctermbg=None
      hi LineNr             ctermfg=Yellow        ctermbg=None
      hi CursorLineNr       ctermfg=Yellow        ctermbg=None
      hi Normal             ctermfg=White
      hi Search             ctermfg=White         ctermbg=DarkRed
      hi Visual             ctermfg=DarkRed       ctermbg=White
      hi vimLineComment     ctermfg=LightBlue
      hi NonText            ctermfg=DarkRed
      hi DiffAdd            ctermfg=Yellow        ctermbg=None
      hi DiffChange         ctermfg=Yellow        ctermbg=None
      hi DiffDelete         ctermfg=Yellow        ctermbg=None
      hi DiffText           ctermfg=None          ctermbg=DarkGray
      hi GitGutterAdd                             ctermbg=None
      hi GitGutterChange                          ctermbg=None
      hi GitGutterChangeDeleteDefault             ctermbg=None
      hi GitGutterChangeLineDefault               ctermbg=None
      hi GitGutterDeleteLine                      ctermbg=None
      hi GitGutterAddDefault                      ctermbg=None
      hi GitGutterChangeDefault                   ctermbg=None
      hi GitGutterChangeDeleteLine                ctermbg=None
      hi GitGutterDelete                          ctermbg=None
      hi GitGutterAddLine                         ctermbg=None
      hi GitGutterChangeDelete                    ctermbg=None
      hi GitGutterChangeLine                      ctermbg=None
      hi GitGutterDeleteDefault                   ctermbg=None
      hi shDoubleQuote                            ctermbg=None
      hi MatchParen          cterm=undercurl,bold
    endfunction
    Plug 'vim-scripts/Transparent'
  " }}}
  " Plug 'justinmk/vim-sneak' {{{
    " Don't lose S to vim-surround
    let g:sneak#streak = 1
    xmap S <Plug>Sneak_S
    Plug 'justinmk/vim-sneak'
  " }}}
  Plug 'ciaranm/securemodelines'
  Plug 'vim-scripts/LargeFile'
" }}}

if !exists('g:james_minimal_plugins')

  " Aesthetic {{{
    " Plug 'bling/vim-airline' {{{
      if !exists('g:james_no_hud')
        function! TablineToggle()
          if g:airline#extensions#tabline#enabled == 1
            let g:airline#extensions#tabline#enabled = 0
          else
            let g:airline#extensions#tabline#enabled = 1
          endif
        endfunction
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#left_sep = ' '
        let g:airline#extensions#tabline#left_alt_sep = '|'
        let g:airline#extensions#tabline#buffer_nr_show = 1
        if v:version >= 704 " If I don't have up-to-date Vim, I probably don't have powerline fonts, and vice versa
          let g:airline_powerline_fonts = 1
        endif
        let g:airline_theme = 'zenburn'
        if !exists('g:airline_powerline_fonts')
          " Use the default set of separators with a few customizations
          let g:airline_left_sep='›'  " Slightly fancier than '>'
          let g:airline_right_sep='‹' " Slightly fancier than '<'
        endif
        " TODO: This stuff gets overwritten?
        " set statusline=%<%f\                     " Filename
        " set statusline+=%w%h%m%r                 " Options
        " set statusline+=%{fugitive#statusline()} " Git
        " set statusline+=\ [%{&ff}/%Y]            " Filetype
        " set statusline+=\ [%{getcwd()}]          " Current dir
        " set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
        nnoremap <silent> <Leader><C-A> :AirlineToggle \| AirlineToggle \| source ~/.vimrc \| e<CR>
        " TODO: shouldn't need this ^
        Plug 'bling/vim-airline'
      endif
    " }}}
    Plug 'vim-airline/vim-airline-themes'
    Plug 'vim-scripts/CycleColor', { 'on': ['CycleColorNext', 'CycleColorPrev', 'CycleColorRefresh'] }
    " Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' } {{{
      let g:indent_guides_enable_on_vim_startup = 0
      let g:indent_guides_default_mapping = 0
      let g:indent_guides_start_level = 2
      let g:indent_guides_guide_size = 1
      nnoremap <Leader>si :IndentGuidesToggle<CR>
      Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' }
    " }}}
    " Plug 'luochen1990/rainbow' {{{
      let g:rainbow_active = 1
      Plug 'luochen1990/rainbow'
    " }}}
    " Plug 'junegunn/goyo.vim', { 'on': 'Goyo' } {{{
      " let g:goyo_width=80
      " let g:goyo_height="85%"
      " let g:goyo_linenr=0
      nnoremap <Leader><C-G> :silent let g:goyo_width=80 \| Goyo<CR>
      function! NotesGoyo()
        set ft=notes
        call MouseToggle()
        let g:goyo_width=80
        Goyo
      endfunction
      nnoremap <Leader><C-F> :silent call NotesGoyo()<CR>
      function! NarrowNotesGoyo()
        set ft=notes
        let g:goyo_width=40
        Goyo
      endfunction
      nnoremap <Leader>g<C-F> :silent call NarrowNotesGoyo()<CR>
      " TODO: how to set these when Goyo enters, and unset them when leaving?
      " TODO: and add more temporary things (e.g. switch $ and g$)
      " nnoremap <silent> <C-K> :bp<CR>
      " nnoremap <silent> <C-L> :bn<CR>
      Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
    " }}}
    " Plug 'junegunn/limelight.vim', { 'on': 'Limelight' } {{{
      function! LimelightToggle()
        if !exists('g:james_limelight')
          let g:james_limelight=1
          Limelight
        else
          if g:james_limelight == 1
            let g:james_limelight=0
            Limelight!
          else
            let g:james_limelight=1
            Limelight
          endif
        endif
      endfunction
      nnoremap <Leader><C-L> :call LimelightToggle()<CR>
      " Color name (:help cterm-colors) or ANSI code
      let g:limelight_conceal_ctermfg = 'gray'
      let g:limelight_conceal_ctermfg = 240

      " Color name (:help gui-colors) or RGB color
      let g:limelight_conceal_guifg = 'DarkGray'
      let g:limelight_conceal_guifg = '#777777'

      " Default: 0.5
      let g:limelight_default_coefficient = 0.7

      " Number of preceding/following paragraphs to include (default: 0)
      let g:limelight_paragraph_span = 1

      " Beginning/end of paragraph
      "   When there's no empty line between the paragraphs
      "   and each paragraph starts with indentation
      let g:limelight_bop = '^\s'
      let g:limelight_eop = '\ze\n^\s'

      " Highlighting priority (default: 10)
      "   Set it to -1 not to overrule hlsearch
      let g:limelight_priority = -1
      Plug 'junegunn/limelight.vim', { 'on': 'Limelight' }
    " }}}
    Plug 'vasconcelloslf/vim-interestingwords'
  " }}}

  " Buffers / windows / tabs / sessions {{{
    Plug 'Asheq/close-buffers.vim'
    " Plug 'troydm/zoomwintab.vim', { 'on': 'ZoomWinTabToggle' } {{{
      let g:zoomwintab_remap=0
      nnoremap <silent> <C-W><C-W> :ZoomWinTabToggle<CR>
      Plug 'troydm/zoomwintab.vim', { 'on': 'ZoomWinTabToggle' }
    " }}}
    Plug 'vim-scripts/Tabmerge', { 'on': 'Tabmerge' }
    "Plug 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'
    " Plug 'xolox/vim-misc' | Plug 'xolox/vim-session' {{{
      let g:session_autoload = 'no'
      let g:session_autosave = 'no'
      nnoremap <Leader>S <Nop>
      nnoremap <Leader>SL :SessionList<CR>
      nnoremap <Leader>SO :OpenSession<Space>
      nnoremap <Leader>SV :ViewSession<CR>
      nnoremap <Leader>SS :SaveSession<Space>
      nnoremap <Leader>SC :CloseSession<CR>
      nnoremap <Leader>STO :OpenTabSession<CR>
      nnoremap <Leader>STS :SaveTabSession<CR>
      nnoremap <Leader>STA :AppendTabSession<CR>
      nnoremap <Leader>STC :CloseTabSession<CR>
      Plug 'xolox/vim-misc' | Plug 'xolox/vim-session'
    " }}}
  " }}}

  " Completion / fuzzy find / snippets {{{
    " Plug 'mileszs/ack.vim' {{{
      if executable('rg')
        let g:ackprg = 'rg --vimgrep --no-heading --smart-case'
      endif
      Plug 'mileszs/ack.vim'
    " }}}
    Plug 'goldfeld/ctrlr.vim'
    " Plug 'junegunn/fzf', { 'dir': '~/src/opensource/junegunn/fzf', 'do': 'yes \| ./install' } {{{
      " command! FZFMru call fzf#run({
      " \  'source':  v:oldfiles,
      " \  'sink':    'e',
      " \  'options': '-m -x +s' })
      Plug 'junegunn/fzf', { 'dir': '~/src/opensource/junegunn/fzf', 'do': 'yes \| ./install --all' }
      " TODO: check if rg installed
      " nnoremap <Leader>eo :FZFMru<CR>
      nnoremap g* :Rg <C-R><C-W><CR>
      " inoremap <expr> <C-X><C-K> fzf#vim#complete('cat /usr/share/dict/words')
      " Global line completion (not just open buffers. ripgrep required.)
      inoremap <expr> <C-X><C-L> fzf#vim#complete(fzf#wrap({
        \ 'prefix': '^.*$',
        \ 'source': 'rg -n ^ --color always',
        \ 'options': '--ansi --delimiter : --nth 3..',
        \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))
      " Match case of first letter, by copying /usr/share/dict/words with each entry duplicated with
      " the first letter's case toggled. Lowercase words should come before uppercase words, since
      " all-lowercase inputs trigger case-insensitive matching. Fixes matches at sentence start.
      imap <expr> <C-X><C-K> fzf#vim#complete('cat /usr/share/dict/case_insensitive_words')
      imap <C-X><C-F> <plug>(fzf-complete-path)
      imap <C-X><C-J> <plug>(fzf-complete-file-ag)
      nnoremap gm :History<CR>
      nnoremap gb :Buffers<CR>
      nnoremap <C-P> :Files<CR>
      function! FzfSpellSink(word)
        exe 'normal! "_ciw'.a:word
      endfunction
      function! FzfSpell()
        let suggestions = spellsuggest(expand("<cword>"))
        return fzf#run({'source': suggestions, 'sink': function("FzfSpellSink"), 'down': 10 })
      endfunction
      nnoremap z= :call FzfSpell()<CR>
    " }}}
    Plug 'junegunn/fzf.vim'
    " Plug 'majutsushi/tagbar' if 704 {{{
      if v:version >= 704
        let g:tagbar_autoclose=1
        nnoremap <Leader><C-]> :TagbarToggle<CR>
        Plug 'majutsushi/tagbar'
      endif
    " }}}
    Plug 'roxma/nvim-yarp'
    " Plug 'ncm2/ncm2' {{{
      Plug 'ncm2/ncm2'
      function! NCM2Toggle()
        if exists('b:ncm2_enable') && b:ncm2_enable == 1
          set completeopt=menu,preview
          call ncm2#disable_for_buffer()
        else
          set completeopt=noinsert,menuone,noselect
          call ncm2#enable_for_buffer()
        endif
      endfunction
      nnoremap <Leader><Tab> :call NCM2Toggle()<CR>
      " let ncm2#popup_delay = 5
      " let ncm2#complete_length = [[1, 1]]
      let g:ncm2#matcher = 'substrfuzzy'
      " TODO: Completion order/timing so that <C-P> immediately inputs match
      "       and sorts matches by position, not alphabetically
    " }}}
    Plug 'ncm2/ncm2-jedi'
    Plug 'ncm2/ncm2-bufword'
    Plug 'ncm2/ncm2-path'
    " Plug 'ncm2/ncm2-ultisnips' {{{
      " let g:ncm2_ultisnips#source = {'priority': 10}
      " Plug 'ncm2/ncm2-ultisnips'
    " }}}
    Plug 'honza/vim-snippets'
    " Plug 'SirVer/ultisnips' {{{
      let g:UltiSnipsExpandTrigger="<C-L>"
      let g:UltiSnipsJumpForwardTrigger="<C-K>"
      let g:UltiSnipsJumpBackwardTrigger="<C-J>"
      let g:UltiSnipsListSnippets = "<S-Tab>"
      let g:UltiSnipsRemoveSelectModeMappings = 0
      let g:UltiSnipsSnippetDirectories = ['UltiSnips', '~/.vim/plugged/UltiSnips/', '~/.vim/plugged/snippets/', '~/dotfiles/ultisnips']
      " inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')
      " Plug 'SirVer/ultisnips'
    " }}}
    " Plug 'Shougo/echodoc.vim', { 'on': 'EchoDocEnable' } {{{
      Plug 'Shougo/echodoc.vim', { 'on': 'EchoDocEnable' }
      nnoremap <Leader>se :EchoDocEnable<CR>
    " }}}
  " }}}

  " Core {{{
    " Plug 'cohama/lexima.vim' if 704 {{{
      let g:lexima_no_default_rules=1
      let g:lexima_disabled=1
      if v:version >= 704
        Plug 'cohama/lexima.vim'
      endif
    " }}}
    " Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } {{{
      let g:undotree_SetFocusWhenToggle=1
      nnoremap <Leader>u :UndotreeToggle<CR>
      Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
    " }}}
    " Plug 'neovim/nvim-lspconfig'
    " Plug 'scrooloose/nerdcommenter' {{{
      let g:NERDCompactSexyComs=1
      let g:NERDSpaceDelims=1
      let g:NERDCustomDelimiters = {
        \ 'scala': { 'left': '//', 'nested': 1, 'leftAlt': '/**', 'rightAlt': '*/', 'nestedAlt': 0 },
        \ 'python': { 'left': '#', 'right': '' },
        \ 'notes': { 'left': '#', 'right': '' }
      \ }
      " This is used with <C-/> in practice
      map <C-/> <Plug>NERDCommenterToggle
      Plug 'scrooloose/nerdcommenter'
    " }}}
    " Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } {{{
      "let NERDTreeHijackNetrw = 1
      "let loaded_netrwPlugin = 1
      nnoremap ,T :NERDTreeToggle<CR>
      Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    " }}}
    Plug 'tmhedberg/matchit'
    " Plug 'tpope/vim-abolish' {{{
      xnoremap <Leader>ss y:%S/<C-R>"/<C-R>"/g<C-G>
      nnoremap <Leader>ss :%S/<C-R><C-W>/<C-R><C-W>/g<C-G>
      Plug 'tpope/vim-abolish'
    " }}}
    Plug 'tpope/vim-eunuch'
    Plug 'lambdalisue/suda.vim'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-sensible'
    Plug 'tpope/vim-unimpaired'
  " }}}

  " Fun {{{
    Plug 'mattn/invader-vim', { 'on': 'Invader' }
  " }}}

  " Integration {{{
    " Plug 'airblade/vim-gitgutter' {{{
      let g:gitgutter_enabled = 0
      "let g:gitgutter_initialised = 0
      "let g:gitgutter_realtime = 0
      nnoremap <silent> <Leader>gr :Gread<CR>:GitGutter<CR>
      nnoremap <silent> <Leader>gw :Gwrite<CR>:GitGutter<CR>
      nnoremap <silent> <Leader>gg :GitGutterToggle<CR>
      Plug 'airblade/vim-gitgutter'
    " }}}
    " Plug 'jpalardy/vim-slime' {{{
      let g:slime_target = "neovim"
      let g:slime_python_ipython = 1
      let g:slime_preserve_curpos = 0
      let g:slime_no_mappings = 1
      xmap <Leader><CR> <Plug>SlimeRegionSend
      nmap <Leader><CR> <Plug>SlimeParagraphSend
      nmap <Leader><C-V>     <Plug>SlimeConfig
      Plug 'jpalardy/vim-slime'
    " }}}
    " Plug 'christoomey/vim-tmux-navigator' {{{
      let g:tmux_navigator_no_mappings = 1
      "nnoremap <silent> {Left-mapping} :TmuxNavigateLeft<CR>
      "nnoremap <silent> {Down-Mapping} :TmuxNavigateDown<CR>
      "nnoremap <silent> {Up-Mapping} :TmuxNavigateUp<CR>
      "nnoremap <silent> {Right-Mapping} :TmuxNavigateRight<CR>
      "nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<CR>
      Plug 'christoomey/vim-tmux-navigator'
    " }}}
    " Plug 'scrooloose/syntastic' if 704 {{{
      if v:version >= 704
        let g:syntastic_mode_map = {'mode': 'passive'}
        nnoremap <Leader>sy :SyntasticToggleMode<CR>
        nnoremap <Leader>ys :SyntasticCheck<CR>
        Plug 'scrooloose/syntastic'
      endif
    " }}}
    " Plug 'tpope/vim-fugitive' {{{
      nnoremap <silent> <Leader>gs :Git<CR>
      nnoremap <silent> <Leader>gd :Gdiff<CR>
      nnoremap <silent> <Leader>gm :Gdiff master<CR>
      nnoremap <silent> <Leader>gc :Gcommit<CR>
      nnoremap <silent> <Leader>gb :Gblame<CR>
      nnoremap <silent> <Leader>gl :Gclog<CR>
      nnoremap <silent> <Leader>gp :Git push<CR>
      nnoremap <silent> <Leader>ge :Gedit<CR>
      Plug 'tpope/vim-fugitive'
    " }}}
    " Plug 'ianding1/leetcode.vim' {{{
      nnoremap <leader>ll :LeetCodeList<cr>
      nnoremap <leader>lt :LeetCodeTest<cr>
      nnoremap <leader>ls :LeetCodeSubmit<cr>
      nnoremap <leader>li :LeetCodeSignIn<cr>
      Plug 'ianding1/leetcode.vim'
    " }}}
    " Plug 'itchyny/calendar.vim' {{{
      let g:calendar_google_calendar = 1
      let g:calendar_google_task = 1
      Plug 'itchyny/calendar.vim'
    " }}}
  " }}}

  " Registers {{{
    Plug 'vim-scripts/RedirCommands'
    Plug 'vim-scripts/regRedir.vim'
    " Plug 'tyru/regbuf.vim' {{{
      nnoremap <Leader>sr :RegbufOpen<CR>
      Plug 'tyru/regbuf.vim'
      "autocmd regbuf BufWinLeave <buffer> bw regbuf:preview
    " }}}
  " }}}

  " Terminal {{{
    "Plug 'brettanomyces/nvim-terminus'
    " Plug 'Shougo/deol.nvim'
  " }}}

  " Text objects {{{
    Plug 'b4winckler/vim-angry'
    " Plug 'bkad/CamelCaseMotion' {{{
      map -w <Plug>CamelCaseMotion_w
      map -b <Plug>CamelCaseMotion_b
      map -e <Plug>CamelCaseMotion_e
      omap i-w <Plug>CamelCaseMotion_iw
      xmap i-w <Plug>CamelCaseMotion_iw
      omap i-b <Plug>CamelCaseMotion_ib
      xmap i-b <Plug>CamelCaseMotion_ib
      omap i-e <Plug>CamelCaseMotion_ie
      xmap i-e <Plug>CamelCaseMotion_ie
      Plug 'bkad/CamelCaseMotion'
    " }}}
    Plug 'kana/vim-textobj-entire'
    Plug 'kana/vim-textobj-user'
    Plug 'michaeljsmith/vim-indent-object'
    Plug 'vim-scripts/Parameter-Text-Objects'
    " Plug 'tpope/vim-surround' {{{
      " Sneak has S so use ,S
      let g:surround_no_mappings = 1
      xmap <Leader>S <Plug>VSurround
      " Largely defaults below
      nmap ds  <Plug>Dsurround
      nmap cs  <Plug>Csurround
      nmap cS  <Plug>CSurround
      nmap ys  <Plug>Ysurround
      nmap yS  <Plug>YSurround
      nmap yss <Plug>Yssurround
      nmap ySS <Plug>YSsurround
      xmap gS  <Plug>VgSurround
      imap <A-s> <Plug>Isurround
      imap <A-S> <Plug>ISurround
      Plug 'tpope/vim-surround'
    " }}}
  " }}}

  " Visual / selection / alignment {{{
    " Plug 'godlygeek/tabular' {{{
      nmap <Leader>a& :Tabularize /&<CR>
      xmap <Leader>a& :Tabularize /&<CR>
      nmap <Leader>a= :Tabularize /=<CR>
      xmap <Leader>a= :Tabularize /=<CR>
      nmap <Leader>a# :Tabularize /#<CR>
      xmap <Leader>a# :Tabularize /#<CR>
      nmap <Leader>a: :Tabularize /:<CR>
      xmap <Leader>a: :Tabularize /:<CR>
      nmap <Leader>a:: :Tabularize /:\zs<CR>
      xmap <Leader>a:: :Tabularize /:\zs<CR>
      nmap <Leader>a, :Tabularize /,<CR>
      xmap <Leader>a, :Tabularize /,<CR>
      nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
      xmap <Leader>a<Bar> :Tabularize /<Bar><CR>
      Plug 'godlygeek/tabular'
    " }}}
    Plug 'vim-scripts/visSum.vim'
    Plug 'vim-scripts/vsearch.vim'
  " }}}

  " Language-specific {{{
    " Plug 'chrisbra/csv.vim', { 'on': 'LoadCsv' } {{{
      "au! BufNewFile,BufRead *.bsv set filetype=csv
      nnoremap <Leader>qw :WhatColumn<CR>
      nnoremap <Leader>qW :WhatColumn!<CR>
      nnoremap <Leader>qc :NrColumns<CR>
      nnoremap <Leader>qs :SearchInColumn<Space>
      nnoremap <Leader>qh :HiColumn<CR>
      nnoremap <Leader>qH :HiColumn!<CR>
      nmap <Leader>qd :let g:csv_delim=''<C-B>
      nnoremap <silent> <Leader>qS :CSVTabularize<CR><C-W>T:above new<CR>:res 3<CR>:setl scrollbind buftype=nofile<CR><C-W>j:setl scrollbind sbo=hor buftype=nofile<CR>ggVjjd<C-W>kVp<C-W>j
      Plug 'chrisbra/csv.vim', { 'on': 'LoadCsv' }
    " }}}
    Plug 'derekwyatt/vim-sbt', { 'for': 'sbt.scala' }
    " Plug 'derekwyatt/vim-scala', { 'for': 'scala' } {{{
      let g:scala_scaladoc_indent = 1
      let g:scala_use_default_keymappings = 0
      let g:scala_sort_across_groups=1
      " let g:scala_first_party_namespaces='\(com\.company\)'
      let g:scala_use_builtin_tagbar_defs=0
      " nnoremap          <C-S><C-A><C-T> :Ack  <C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR><Home><Right><Right><Right>
      " nnoremap          <C-S><C-A><C-M> :Ack  <C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR><Home><Right><Right><Right>
      " nnoremap          <C-S><C-A><C-R> :Ack  <C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR><Home><Right><Right><Right>
      " nnoremap          <C-S><C-T>         :<C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR>
      " cnoremap          <C-S><C-T>          <C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR>
      " nnoremap          <C-S><C-M>         :<C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR>
      " cnoremap          <C-S><C-M>          <C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR>
      " nnoremap          <C-S><C-R>         :<C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR>
      " cnoremap          <C-S><C-R>          <C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR>
      " nnoremap <silent> <C-S><C-P><C-T> :CtrlP <C-R>=scala#GetTestDirForFuzzyFinder('%:p:h')<CR><CR>
      " nnoremap <silent> <C-S><C-P><C-M> :CtrlP <C-R>=scala#GetMainDirForFuzzyFinder('%:p:h')<CR><CR>
      " nnoremap <silent> <C-S><C-P><C-R> :CtrlP <C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR><CR>
      nnoremap <buffer> <silent> <Leader>dr :cd <C-R>=scala#GetRootDirForFuzzyFinder('%:p:h')<CR><CR>
      function! SetScalaOptions()
        setl formatprg=java\ -jar\ ~/bin/scalariform.jar\ -f\ -q\ +compactControlReadability\ +alignParameters\ +alignSingleLineCaseStatements\ +doubleIndentClassDeclaration\ +preserveDanglingCloseParenthesis\ +rewriteArrowSymbols\ +preserveSpaceBeforeArguments\ --stdin\ --stdout
        setl indentkeys=0{,0},0),!^F,o,O,e,=case,<CR>
        " Make comment match scaladoc style
        nnoremap <Leader>cd I/**<Space><Esc>o/<Esc>
        xmap <Leader>cd <Esc>'<V'><C-V>I<Space><Space>*<Space><Esc>'<<<I/*<Esc>'>o/<Esc>0"yyf*gv:s/^$/<C-T>y/<CR>
      endfunction
      au! BufEnter *.scala call SetScalaOptions()
      Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
    " }}}
    " Plug 'elzr/vim-json', { 'on': 'SynJson' } {{{
      " command! SynJson setl fdm=syntax foldlevel=20 \| Plug 'elzr/vim-json'
      au! BufNewFile,BufRead *.json setl fdm=syntax foldlevel=20
      Plug 'elzr/vim-json', { 'on': 'SynJson' }
    " }}}
    " Plug('https://bitbucket.org/larsyencken/vim-drake-syntax.git'), { 'for': 'drake' } {{{
      au! BufNewFile,BufRead Drakefile* setl ft=drake
      Plug('https://bitbucket.org/larsyencken/vim-drake-syntax.git'), { 'for': 'drake' }
    " }}}
    Plug 'pangloss/vim-javascript'
    Plug 'plasticboy/vim-markdown'
    Plug 't9md/vim-chef'
    Plug 'tpope/vim-ragtag'
    Plug 'tpope/vim-dadbod', { 'for': 'sql' }
    Plug 'Vimjas/vim-python-pep8-indent'
    " Plug 'nvie/vim-flake8', { 'for': 'python' }
  " }}}

endif

call plug#end()
" vim: set foldmethod=marker :
" TODO: vim exchange? M-t word swap too?
" TODO: sneak with number hints, to not interfere with most common normal-mode commands?
